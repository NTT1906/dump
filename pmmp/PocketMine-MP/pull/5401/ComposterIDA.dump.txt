@From IDA's pseudocode: 


_DWORD *__fastcall ComposterBlock::ComposterBlock(__int64 a1, __int64 a2, unsigned int a3, float a4)
{
  __int64 Material; // rax
  _DWORD *result; // rax
  float v7; // [rsp+50h] [rbp-10h] BYREF
  int v8; // [rsp+54h] [rbp-Ch] BYREF
  unsigned __int64 v9; // [rsp+58h] [rbp-8h]

  v9 = __readfsqword(0x28u);
  Material = Material::getMaterial(2LL);
  BlockLegacy::BlockLegacy(a1, a2, a3, Material);
  *(_QWORD *)a1 = &`vtable for'ComposterBlock + 2;
  *(_DWORD *)(a1 + 172) = 8;
  BlockLegacy::setSolid((BlockLegacy *)a1, 0);
  v8 = 1061997773;
  Material::getTranslucency(*(Material **)(a1 + 216));
  v7 = a4;
  result = (_DWORD *)std::max<float>(&v8, &v7);
  *(_DWORD *)(a1 + 280) = *result;
  *(_QWORD *)(a1 + 184) = 0x10000000000LL;
  return result;
}


__int64 __fastcall ComposterBlock::use(ComposterBlock *this, Player *a2, const BlockPos *a3, __m128 a4, float a5)
{
  Level *Level; // rax
  BlockSource *Region; // rax
  __int64 v7; // rax
  const ItemStack *SelectedItem; // rax
  const BlockPos *v9; // rcx
  const BlockPos *v10; // r8
  __int16 v12; // [rsp+Eh] [rbp-182h]
  __int16 Id; // [rsp+56h] [rbp-13Ah]
  __int64 LegacyBlock; // [rsp+70h] [rbp-120h]
  int v15; // [rsp+94h] [rbp-FCh]
  BlockSource *v16; // [rsp+98h] [rbp-F8h]
  Level *v17; // [rsp+A0h] [rbp-F0h]
  Block *Block; // [rsp+A8h] [rbp-E8h]
  __int64 v20; // [rsp+D8h] [rbp-B8h] BYREF
  float v21; // [rsp+E0h] [rbp-B0h]
  __int64 v22; // [rsp+E8h] [rbp-A8h] BYREF
  float v23; // [rsp+F0h] [rbp-A0h]
  char v24[144]; // [rsp+F8h] [rbp-98h] BYREF
  unsigned __int64 v25; // [rsp+188h] [rbp-8h]

  v25 = __readfsqword(0x28u);
  Level = (Level *)Actor::getLevel(a2);
  if ( (Level::isClientSide(Level) & 1) == 0 )
  {
    Region = (BlockSource *)Actor::getRegion(a2);
    Block = (Block *)BlockSource::getBlock(Region, a3);
    LegacyBlock = Block::getLegacyBlock(Block);
    v7 = Block::getLegacyBlock(VanillaBlocks::mComposterBlock);
    if ( (BlockLegacy::operator!=(LegacyBlock, v7) & 1) == 0 )
    {
      v17 = (Level *)Actor::getLevel(a2);
      v16 = (BlockSource *)Actor::getRegion(a2);
      SelectedItem = (const ItemStack *)Player::getSelectedItem(a2);
      ItemStack::ItemStack((ItemStack *)v24, SelectedItem);
      v15 = Block::getState<int>(Block, &VanillaStates::ComposterFillLevel);
      if ( v15 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(8LL) )
      {
        ComposterBlock::_emitBoneMeal(this, v17, v16, a3);
        ComposterBlock::empty(v16, Block, a3, v9, *(double *)a4.m128_u64, a5);
        Id = ItemStackBase::getId((ItemStackBase *)v24);
        ComposterBlock::_notifyClientComposterUsed((__int64)this, a2, Id, 20);
      }
      else if ( v15 < (int)enum_cast<ComposterBlock::FillLevel>(7LL)
             && (ComposterBlock::addItem((ComposterBlock *)v24, v16, Block, a3, v10) & 1) != 0 )
      {
        *(double *)a4.m128_u64 = operator+(a3, &ComposterBlock::PARTICLE_OFFSET);
        _mm_storel_ps((double *)&v20, a4);
        v21 = a5;
        v23 = a5;
        v22 = v20;
        Level::broadcastLocalEvent(v17, v16, 2005LL, &v22, 0LL);
        if ( (unsigned int)Player::getPlayerGameType(a2) != 1 )
        {
          ItemStackBase::remove((ItemStackBase *)v24, 1);
          Player::setSelectedItem(a2, (const ItemStack *)v24);
        }
        v12 = ItemStackBase::getId((ItemStackBase *)v24);
        ComposterBlock::_notifyClientComposterUsed((__int64)this, a2, v12, 19);
      }
      ItemStack::~ItemStack(v24);
    }
  }
  return 1LL;
}

unsigned __int64 __fastcall ComposterBlock::_emitBoneMeal(
        ComposterBlock *this,
        Level *a2,
        BlockSource *a3,
        const BlockPos *a4)
{
  __int64 v4; // rdx
  __int64 v8; // [rsp+40h] [rbp-C0h]
  char v9[136]; // [rsp+70h] [rbp-90h] BYREF
  unsigned __int64 v10; // [rsp+F8h] [rbp-8h]

  v10 = __readfsqword(0x28u);
  v8 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CB58);
  ItemInstance::ItemInstance(v9, v8, v4, 1LL, 0LL, 0LL);
  BlockLegacy::popResource(this, a3, a4, (const ItemInstance *)v9);
  ItemInstance::~ItemInstance(v9);
  return v10;
}



unsigned __int64 __fastcall ComposterBlock::empty(
        ComposterBlock *this,
        BlockSource *a2,
        const Block *a3,
        const BlockPos *a4,
        double a5,
        float a6)
{
  const Block *v6; // rax
  __m128 v7; // xmm0
  int Level; // [rsp+30h] [rbp-140h]
  __int64 v11; // [rsp+80h] [rbp-F0h] BYREF
  int v12; // [rsp+88h] [rbp-E8h]
  char v13[16]; // [rsp+90h] [rbp-E0h] BYREF
  __int64 v14; // [rsp+A0h] [rbp-D0h] BYREF
  int v15; // [rsp+A8h] [rbp-C8h]
  __int64 v16; // [rsp+B0h] [rbp-C0h] BYREF
  char v17[176]; // [rsp+B8h] [rbp-B8h] BYREF
  unsigned __int64 v18; // [rsp+168h] [rbp-8h]

  v18 = __readfsqword(0x28u);
  if ( ComposterBlock::_verifyIsComposter(a2, a2) )
  {
    v16 = Block::setState<int>(a2, &VanillaStates::ComposterFillLevel, 0LL);
    v6 = (const Block *)gsl::not_null<Block const*>::operator*(&v16);
    BlockSource::setBlock(this, a3, v6, 3, 0LL);
    v7 = (__m128)0x3F000000u;
    Level = BlockSource::getLevel(this);
    Vec3::Vec3((Vec3 *)v13, 0.5);
    *(double *)v7.m128_u64 = operator+(a3, v13);
    v12 = LODWORD(a6);
    _mm_storel_ps((double *)&v11, v7);
    v15 = v12;
    v14 = v11;
    ActorDefinitionIdentifier::ActorDefinitionIdentifier((ActorDefinitionIdentifier *)v17);
    Level::broadcastSoundEvent(Level, (_DWORD)this, 266, (unsigned int)&v14, -1, (unsigned int)v17, 0, 0);
    ActorDefinitionIdentifier::~ActorDefinitionIdentifier(v17);
  }
  return __readfsqword(0x28u);
}


unsigned __int64 __fastcall ComposterBlock::_notifyClientComposterUsed(
        __int64 a1,
        const Player *a2,
        __int16 a3,
        int a4)
{
  char v7[248]; // [rsp+38h] [rbp-1C8h] BYREF
  int v8; // [rsp+130h] [rbp-D0h] BYREF
  __int16 v9; // [rsp+138h] [rbp-C8h]
  int v10; // [rsp+13Ch] [rbp-C4h]
  unsigned __int64 v11; // [rsp+1F8h] [rbp-8h]

  v11 = __readfsqword(0x28u);
  EventPacket::Data::Data((EventPacket::Data *)&v8);
  v8 = 16;
  v9 = a3;
  v10 = a4;
  EventPacket::EventPacket((EventPacket *)v7, a2, (const EventPacket::Data *)&v8);
  (*(void (__fastcall **)(const Player *, char *))(*(_QWORD *)a2 + 3272LL))(a2, v7);
  EventPacket::~EventPacket((EventPacket *)v7);
  EventPacket::Data::~Data((EventPacket::Data *)&v8);
  return v11;
}


__int64 __fastcall ComposterBlock::addItem(
        ComposterBlock *this,
        const ItemStack *a2,
        BlockSource *a3,
        const Block *a4,
        const BlockPos *a5,
        double a6,
        float a7)
{
  Random *Random; // rax
  const Block *v8; // rax
  __m128 v9; // xmm0
  const Block *v10; // rax
  __m128 v11; // xmm0
  unsigned int v13; // [rsp+B4h] [rbp-20Ch]
  Level *Level; // [rsp+B8h] [rbp-208h]
  int FillChance; // [rsp+C0h] [rbp-200h]
  int v16; // [rsp+C4h] [rbp-1FCh]
  char v19; // [rsp+EFh] [rbp-1D1h]
  __int64 v20; // [rsp+F0h] [rbp-1D0h] BYREF
  int v21; // [rsp+F8h] [rbp-1C8h]
  char v22[16]; // [rsp+100h] [rbp-1C0h] BYREF
  __int64 v23; // [rsp+110h] [rbp-1B0h] BYREF
  int v24; // [rsp+118h] [rbp-1A8h]
  __int64 v25; // [rsp+120h] [rbp-1A0h] BYREF
  int v26; // [rsp+128h] [rbp-198h]
  char v27[16]; // [rsp+130h] [rbp-190h] BYREF
  __int64 v28; // [rsp+140h] [rbp-180h] BYREF
  int v29; // [rsp+148h] [rbp-178h]
  __int64 v30; // [rsp+150h] [rbp-170h] BYREF
  char v31[176]; // [rsp+158h] [rbp-168h] BYREF
  char v32[176]; // [rsp+208h] [rbp-B8h] BYREF
  unsigned __int64 v33; // [rsp+2B8h] [rbp-8h]

  v33 = __readfsqword(0x28u);
  if ( !ComposterBlock::_verifyIsComposter(a3, a2)
    || (ItemStackBase::isNull(this) & 1) != 0
    || (v16 = Block::getState<int>(a3, &VanillaStates::ComposterFillLevel),
        FillChance = ComposterBlock::_getFillChance(this, (const ItemStack *)&VanillaStates::ComposterFillLevel),
        FillChance <= 0)
    || v16 >= (int)enum_cast<ComposterBlock::FillLevel>(7LL) )
  {
    v19 = 0;
  }
  else
  {
    Level = (Level *)BlockSource::getLevel(a2);
    v13 = v16 + 1;
    if ( v16 && (Random = (Random *)Level::getRandom(Level), (int)Random::nextInt(Random, 100) > FillChance) )
    {
      v11 = (__m128)0x3F000000u;
      Vec3::Vec3((Vec3 *)v22, 0.5);
      *(double *)v11.m128_u64 = operator+(a4, v22);
      v21 = LODWORD(a7);
      _mm_storel_ps((double *)&v20, v11);
      v24 = v21;
      v23 = v20;
      ActorDefinitionIdentifier::ActorDefinitionIdentifier((ActorDefinitionIdentifier *)v31);
      Level::broadcastSoundEvent((_DWORD)Level, (_DWORD)a2, 267, (unsigned int)&v23, -1, (unsigned int)v31, 0, 0);
      ActorDefinitionIdentifier::~ActorDefinitionIdentifier(v31);
    }
    else
    {
      v30 = Block::setState<int>(a3, &VanillaStates::ComposterFillLevel, v13);
      v8 = (const Block *)gsl::not_null<Block const*>::operator*(&v30);
      v9 = (__m128)0x3F000000u;
      BlockSource::setBlock(a2, a4, v8, 3, 0LL);
      Vec3::Vec3((Vec3 *)v27, 0.5);
      *(double *)v9.m128_u64 = operator+(a4, v27);
      v26 = LODWORD(a7);
      _mm_storel_ps((double *)&v25, v9);
      v29 = v26;
      v28 = v25;
      ActorDefinitionIdentifier::ActorDefinitionIdentifier((ActorDefinitionIdentifier *)v32);
      Level::broadcastSoundEvent((_DWORD)Level, (_DWORD)a2, 268, (unsigned int)&v28, -1, (unsigned int)v32, 0, 0);
      ActorDefinitionIdentifier::~ActorDefinitionIdentifier(v32);
      if ( v13 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(7LL) )
      {
        v10 = (const Block *)gsl::not_null<Block const*>::operator*(&v30);
        BlockSource::addToTickingQueue(a2, a4, v10, 20, 0);
      }
    }
    v19 = 1;
  }
  return v19 & 1;
}

__int64 __fastcall ComposterBlock::tick(
        ComposterBlock *this,
        BlockSource *a2,
        const BlockPos *a3,
        Random *a4,
        double a5,
        float a6)
{
  unsigned int v8; // eax
  const Block *v9; // rax
  __m128 v10; // xmm0
  int Level; // [rsp+28h] [rbp-168h]
  int v13; // [rsp+5Ch] [rbp-134h]
  ComposterBlock *Block; // [rsp+78h] [rbp-118h]
  __int64 v18; // [rsp+A0h] [rbp-F0h] BYREF
  int v19; // [rsp+A8h] [rbp-E8h]
  char v20[16]; // [rsp+B0h] [rbp-E0h] BYREF
  __int64 v21; // [rsp+C0h] [rbp-D0h] BYREF
  int v22; // [rsp+C8h] [rbp-C8h]
  __int64 v23; // [rsp+D0h] [rbp-C0h] BYREF
  char v24[176]; // [rsp+D8h] [rbp-B8h] BYREF
  unsigned __int64 v25; // [rsp+188h] [rbp-8h]

  v25 = __readfsqword(0x28u);
  Block = (ComposterBlock *)BlockSource::getBlock(a2, a3);
  if ( ComposterBlock::_verifyIsComposter(Block, a3) )
  {
    v13 = Block::getState<int>(Block, &VanillaStates::ComposterFillLevel);
    if ( v13 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(7LL) )
    {
      v8 = enum_cast<ComposterBlock::FillLevel>(8LL);
      v23 = Block::setState<int>(Block, &VanillaStates::ComposterFillLevel, v8);
      v9 = (const Block *)gsl::not_null<Block const*>::operator*(&v23);
      BlockSource::setBlock(a2, a3, v9, 3, 0LL);
      v10 = (__m128)0x3F000000u;
      Level = BlockSource::getLevel(a2);
      Vec3::Vec3((Vec3 *)v20, 0.5);
      *(double *)v10.m128_u64 = operator+(a3, v20);
      v19 = LODWORD(a6);
      _mm_storel_ps((double *)&v18, v10);
      v22 = v19;
      v21 = v18;
      ActorDefinitionIdentifier::ActorDefinitionIdentifier((ActorDefinitionIdentifier *)v24);
      Level::broadcastSoundEvent(Level, (_DWORD)a2, 269, (unsigned int)&v21, -1, (unsigned int)v24, 0, 0);
      ActorDefinitionIdentifier::~ActorDefinitionIdentifier(v24);
    }
  }
  return BlockLegacy::tick(this, a2, a3, a4);
}

_BOOL8 __fastcall ComposterBlock::_verifyIsComposter(ComposterBlock *this, const Block *a2)
{
  __int64 v2; // rax
  __int64 LegacyBlock; // [rsp+8h] [rbp-18h]

  LegacyBlock = Block::getLegacyBlock(this);
  v2 = Block::getLegacyBlock(VanillaBlocks::mComposterBlock);
  return (BlockLegacy::operator!=(LegacyBlock, v2) & 1) == 0;
}

__int64 __fastcall ComposterBlock::onPlace(ComposterBlock *this, BlockSource *a2, const BlockPos *a3)
{
  int v4; // [rsp+4h] [rbp-2Ch]
  ComposterBlock *Block; // [rsp+10h] [rbp-20h]

  Block = (ComposterBlock *)BlockSource::getBlock(a2, a3);
  if ( ComposterBlock::_verifyIsComposter(Block, a3) )
  {
    v4 = Block::getState<int>(Block, &VanillaStates::ComposterFillLevel);
    if ( v4 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(7LL) )
      BlockSource::addToTickingQueue(a2, a3, Block, 20, 0);
  }
  return BlockLegacy::onPlace(this, a2, a3);
}

__int64 __fastcall ComposterBlock::onRemove(ComposterBlock *this, BlockSource *a2, const BlockPos *a3)
{
  int v4; // [rsp+Ch] [rbp-34h]
  Level *Level; // [rsp+18h] [rbp-28h]
  ComposterBlock *Block; // [rsp+20h] [rbp-20h]

  Block = (ComposterBlock *)BlockSource::getBlock(a2, a3);
  Level = (Level *)BlockSource::getLevel(a2);
  if ( (Level::isClientSide(Level) & 1) == 0 && ComposterBlock::_verifyIsComposter(Block, a3) )
  {
    v4 = Block::getState<int>(Block, &VanillaStates::ComposterFillLevel);
    if ( v4 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(8LL) )
      ComposterBlock::_emitBoneMeal(this, Level, a2, a3);
  }
  return BlockLegacy::onRemove(this, a2, a3);
}

unsigned __int64 __fastcall ComposterBlock::onMove(
        ComposterBlock *this,
        BlockSource *a2,
        const BlockPos *a3,
        const BlockPos *a4)
{
  Level *Level; // rax
  const BlockPos *v5; // rdx
  const Block *v6; // rax
  int v8; // [rsp+20h] [rbp-40h]
  __int64 ComposterAt; // [rsp+28h] [rbp-38h]
  __int64 v11[2]; // [rsp+50h] [rbp-10h] BYREF

  v11[1] = __readfsqword(0x28u);
  Level = (Level *)BlockSource::getLevel(a2);
  if ( (Level::isClientSide(Level) & 1) == 0 )
  {
    ComposterAt = ComposterBlock::getComposterAt(a2, a3, v5);
    if ( ComposterAt )
    {
      v8 = Block::getState<int>(ComposterAt, &VanillaStates::ComposterFillLevel);
      if ( v8 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(8LL) )
      {
        v11[0] = Block::setState<int>(ComposterAt, &VanillaStates::ComposterFillLevel, 0LL);
        v6 = (const Block *)gsl::not_null<Block const*>::operator*(v11);
        BlockSource::setBlock(a2, a3, v6, 3, 0LL);
      }
    }
  }
  return __readfsqword(0x28u);
}

Block *__fastcall ComposterBlock::getComposterAt(ComposterBlock *this, BlockSource *a2, const BlockPos *a3)
{
  __int64 v3; // rax
  __int64 LegacyBlock; // [rsp+8h] [rbp-28h]
  Block *Block; // [rsp+10h] [rbp-20h]

  Block = (Block *)BlockSource::getBlock(this, a2);
  LegacyBlock = Block::getLegacyBlock(Block);
  v3 = Block::getLegacyBlock(VanillaBlocks::mComposterBlock);
  if ( (BlockLegacy::operator==(LegacyBlock, v3) & 1) != 0 )
    return Block;
  else
    return 0LL;
}

__int64 __fastcall ComposterBlock::hasComparatorSignal(ComposterBlock *this)
{
  return 1LL;
}

__int64 __fastcall ComposterBlock::getComparatorSignal(
        ComposterBlock *this,
        BlockSource *a2,
        const BlockPos *a3,
        const Block *a4)
{
  return Block::getState<int>(a4, &VanillaStates::ComposterFillLevel);
}

__int64 __fastcall ComposterBlock::addCollisionShapes(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        __int64 a6)
{
  (*(void (__fastcall **)(__int64, __int64, __int64, __int64, __int64, __int64))(*(_QWORD *)a1 + 72LL))(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6);
  return 1LL;
}

__int64 __fastcall ComposterBlock::addAABBs(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const BlockPos *a4,
        __int64 a5,
        __int64 a6)
{
  __int64 v6; // rax
  __int64 v7; // rax
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v12; // [rsp+4Bh] [rbp-185h]
  float v13; // [rsp+D0h] [rbp-100h]
  int v14; // [rsp+D4h] [rbp-FCh]
  char v18[16]; // [rsp+108h] [rbp-C8h] BYREF
  char v19[16]; // [rsp+118h] [rbp-B8h] BYREF
  char v20[16]; // [rsp+128h] [rbp-A8h] BYREF
  char v21[16]; // [rsp+138h] [rbp-98h] BYREF
  char v22[16]; // [rsp+148h] [rbp-88h] BYREF
  char v23[16]; // [rsp+158h] [rbp-78h] BYREF
  char v24[16]; // [rsp+168h] [rbp-68h] BYREF
  char v25[16]; // [rsp+178h] [rbp-58h] BYREF
  char v26[16]; // [rsp+188h] [rbp-48h] BYREF
  char v27[16]; // [rsp+198h] [rbp-38h] BYREF
  char v28[32]; // [rsp+1A8h] [rbp-28h] BYREF
  unsigned __int64 v29; // [rsp+1C8h] [rbp-8h]

  v29 = __readfsqword(0x28u);
  v14 = Block::getState<int>(a2, &VanillaStates::ComposterFillLevel);
  v13 = 2.0;
  if ( v14 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(8LL) )
  {
    v13 = 15.0;
  }
  else if ( v14 )
  {
    v13 = (float)((float)((float)v14 * 2.0) - 1.0) + 2.0;
  }
  Vec3::Vec3((Vec3 *)v27, 1.0, v13 / 16.0, 1.0);
  AABB::AABB((AABB *)v28, (const Vec3 *)&Vec3::ZERO, (const Vec3 *)v27);
  Vec3::Vec3((Vec3 *)v26, a4);
  v6 = AABB::move((AABB *)v28, (const Vec3 *)v26);
  BlockLegacy::addAABB(a1, v6, a5, a6);
  Vec3::Vec3((Vec3 *)v25, 0.125, 1.0, 1.0);
  AABB::set((AABB *)v28, (const Vec3 *)&Vec3::ZERO, (const Vec3 *)v25);
  Vec3::Vec3((Vec3 *)v24, a4);
  v7 = AABB::move((AABB *)v28, (const Vec3 *)v24);
  BlockLegacy::addAABB(a1, v7, a5, a6);
  Vec3::Vec3((Vec3 *)v23, 1.0, 1.0, 0.125);
  AABB::set((AABB *)v28, (const Vec3 *)&Vec3::ZERO, (const Vec3 *)v23);
  Vec3::Vec3((Vec3 *)v22, a4);
  v8 = AABB::move((AABB *)v28, (const Vec3 *)v22);
  BYTE4(v12) = 0;
  LODWORD(v12) = (unsigned __int8)BlockLegacy::addAABB(a1, v8, a5, a6);
  Vec3::Vec3((Vec3 *)v21, 1.0 - 0.125, 0.0, 0.0);
  AABB::set((AABB *)v28, (const Vec3 *)v21, (const Vec3 *)&Vec3::ONE);
  Vec3::Vec3((Vec3 *)v20, a4);
  v9 = AABB::move((AABB *)v28, (const Vec3 *)v20);
  BlockLegacy::addAABB(a1, v9, a5, a6);
  Vec3::Vec3((Vec3 *)v19, *(float *)((char *)&v12 + 1), *(float *)((char *)&v12 + 1), 1.0 - 0.125);
  AABB::set((AABB *)v28, (const Vec3 *)v19, (const Vec3 *)&Vec3::ONE);
  Vec3::Vec3((Vec3 *)v18, a4);
  v10 = AABB::move((AABB *)v28, (const Vec3 *)v18);
  return BlockLegacy::addAABB(a1, v10, a5, a6);
}

_BOOL8 __fastcall ComposterBlock::canProvideSupport(__int64 a1, __int64 a2, char a3, int a4)
{
  bool v5; // [rsp+1h] [rbp-19h]

  v5 = 1;
  if ( a3 == 1 )
    return a4 != 0;
  return v5;
}

__int64 __fastcall ComposterBlock::getVariant(ComposterBlock *this, const Block *a2)
{
  return 0LL;
}

__int64 __fastcall ComposterBlock::_getFillChance(ComposterBlock *this, const ItemStack *a2)
{
  unsigned int Id; // [rsp+Ch] [rbp-54h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  __int64 CompostableItems; // [rsp+28h] [rbp-38h]
  __int64 v8; // [rsp+48h] [rbp-18h] BYREF
  __int64 v9[2]; // [rsp+50h] [rbp-10h] BYREF

  v9[1] = __readfsqword(0x28u);
  if ( (ItemStackBase::isBlock(this) & 1) != 0 )
    Id = (__int16)ItemStackBase::getId(this);
  else
    Id = ItemStackBase::getIdAux(this);
  CompostableItems = ComposterBlock::_getCompostableItems(this);
  v5 = std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::begin(CompostableItems, a2);
  v4 = std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::end(CompostableItems);
  v9[0] = sub_1051B320(v5, v4, Id);
  v8 = std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::end(CompostableItems);
  if ( (__gnu_cxx::operator!=<std::pair<int,signed char> const*,std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>>(
          v9,
          &v8) & 1) != 0 )
    return (unsigned int)*(char *)(__gnu_cxx::__normal_iterator<std::pair<int,signed char> const*,std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>>::operator->(v9)
                                 + 4);
  else
    return 0;
}


---
void *__fastcall ComposterBlock::_getCompostableItems(ComposterBlock *this)
{
  __int64 v1; // rdx
  __int64 v2; // rdx
  __int64 v3; // rdx
  __int64 v4; // rdx
  __int64 v5; // rdx
  __int64 v6; // rdx
  __int64 v7; // rdx
  __int64 v8; // rdx
  __int64 v9; // rdx
  __int64 v10; // rdx
  __int64 v11; // rdx
  __int64 v12; // rdx
  __int64 v13; // rdx
  __int64 v14; // rdx
  __int64 v15; // rdx
  __int64 v16; // rdx
  __int64 v17; // rdx
  __int64 v18; // rdx
  __int64 v19; // rdx
  __int64 v20; // rdx
  __int64 v21; // rdx
  __int64 v22; // rdx
  __int64 v23; // rdx
  __int64 v24; // rdx
  __int64 v25; // rdx
  __int64 v26; // rdx
  __int64 v27; // rdx
  __int64 v28; // rdx
  __int64 v29; // rdx
  __int64 v30; // rdx
  __int64 v31; // rdx
  __int64 v32; // rdx
  __int64 v33; // rdx
  __int64 v34; // rdx
  __int64 v35; // rdx
  __int64 v36; // rdx
  __int64 v37; // rdx
  __int64 v38; // rdx
  __int64 v39; // rdx
  __int64 v40; // rdx
  __int64 v41; // rdx
  __int64 v42; // rdx
  __int64 v43; // rdx
  __int64 v44; // rdx
  __int64 v45; // rdx
  __int64 v46; // rdx
  __int64 v47; // rdx
  __int64 v48; // rdx
  __int64 v49; // rdx
  __int64 v50; // rdx
  __int64 v51; // rdx
  __int64 v52; // rdx
  __int64 v53; // rdx
  __int64 v54; // rdx
  __int64 v56; // [rsp+18h] [rbp-528h]
  __int64 v57; // [rsp+28h] [rbp-518h]
  __int64 v58; // [rsp+38h] [rbp-508h]
  __int64 v59; // [rsp+48h] [rbp-4F8h]
  __int64 v60; // [rsp+58h] [rbp-4E8h]
  __int64 v61; // [rsp+68h] [rbp-4D8h]
  __int64 v62; // [rsp+78h] [rbp-4C8h]
  __int64 v63; // [rsp+88h] [rbp-4B8h]
  __int64 v64; // [rsp+98h] [rbp-4A8h]
  __int64 v65; // [rsp+A8h] [rbp-498h]
  __int64 v66; // [rsp+B8h] [rbp-488h]
  __int64 v67; // [rsp+C8h] [rbp-478h]
  __int64 v68; // [rsp+D8h] [rbp-468h]
  __int64 v69; // [rsp+E8h] [rbp-458h]
  __int64 v70; // [rsp+F8h] [rbp-448h]
  __int64 v71; // [rsp+108h] [rbp-438h]
  __int64 v72; // [rsp+118h] [rbp-428h]
  __int64 v73; // [rsp+128h] [rbp-418h]
  __int64 v74; // [rsp+138h] [rbp-408h]
  __int64 v75; // [rsp+148h] [rbp-3F8h]
  __int64 v76; // [rsp+158h] [rbp-3E8h]
  __int64 v77; // [rsp+168h] [rbp-3D8h]
  __int64 v78; // [rsp+178h] [rbp-3C8h]
  __int64 v79; // [rsp+188h] [rbp-3B8h]
  __int64 v80; // [rsp+198h] [rbp-3A8h]
  __int64 v81; // [rsp+1A8h] [rbp-398h]
  __int64 v82; // [rsp+1B8h] [rbp-388h]
  __int64 v83; // [rsp+1C8h] [rbp-378h]
  __int64 v84; // [rsp+1D8h] [rbp-368h]
  __int64 v85; // [rsp+1E8h] [rbp-358h]
  __int64 v86; // [rsp+1F8h] [rbp-348h]
  __int64 v87; // [rsp+208h] [rbp-338h]
  __int64 v88; // [rsp+218h] [rbp-328h]
  __int64 v89; // [rsp+228h] [rbp-318h]
  __int64 v90; // [rsp+238h] [rbp-308h]
  __int64 v91; // [rsp+248h] [rbp-2F8h]
  __int64 v92; // [rsp+258h] [rbp-2E8h]
  __int64 v93; // [rsp+268h] [rbp-2D8h]
  __int64 v94; // [rsp+278h] [rbp-2C8h]
  __int64 v95; // [rsp+288h] [rbp-2B8h]
  __int64 v96; // [rsp+298h] [rbp-2A8h]
  __int64 v97; // [rsp+2A8h] [rbp-298h]
  __int64 v98; // [rsp+2B8h] [rbp-288h]
  __int64 v99; // [rsp+2C8h] [rbp-278h]
  __int64 v100; // [rsp+2D8h] [rbp-268h]
  __int64 v101; // [rsp+2E8h] [rbp-258h]
  __int64 v102; // [rsp+2F8h] [rbp-248h]
  __int64 v103; // [rsp+308h] [rbp-238h]
  __int64 v104; // [rsp+318h] [rbp-228h]
  __int64 v105; // [rsp+328h] [rbp-218h]
  __int64 v106; // [rsp+338h] [rbp-208h]
  __int64 v107; // [rsp+348h] [rbp-1F8h]
  __int64 v108; // [rsp+358h] [rbp-1E8h]
  __int64 v109; // [rsp+368h] [rbp-1D8h]
  __int64 v110[55]; // [rsp+388h] [rbp-1B8h] BYREF

  v110[54] = __readfsqword(0x28u);
  if ( !(_BYTE)byte_16151220 && __cxa_guard_acquire(&byte_16151220) )
  {
    std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::vector(&unk_16151208);
    __cxa_atexit(
      std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::~vector,
      &unk_16151208,
      &dso_handle);
    __cxa_guard_release(&byte_16151220);
  }
  if ( (std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::empty(&unk_16151208) & 1) != 0 )
  {
    v109 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614EDA8);
    v110[0] = sub_1051B520(v109, v1, 30LL);
    v108 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614EDD8);
    v110[1] = sub_1051B520(v108, v2, 30LL);
    v107 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_161501E8);
    v110[2] = sub_1051B520(v107, v3, 30LL);
    v106 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150248);
    v110[3] = sub_1051B520(v106, v4, 30LL);
    v105 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614E538);
    v110[4] = sub_1051B520(v105, v5, 30LL);
    v104 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614EB98);
    v110[5] = sub_1051B710(v104, v6, 30LL);
    v103 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614DAB8);
    v110[6] = sub_1051B710(v103, v7, 30LL);
    v102 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614C918);
    v110[7] = sub_1051B710(v102, v8, 30LL);
    v101 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614F018);
    v110[8] = sub_1051B710(v101, v9, 30LL);
    v100 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614FDC8);
    v110[9] = sub_1051B710(v100, v10, 30LL);
    v99 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150E78);
    v110[10] = sub_1051B710(v99, v11, 30LL);
    v98 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150968);
    v110[11] = sub_1051B710(v98, v12, 30LL);
    v97 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614DAE8);
    v110[12] = sub_1051B520(v97, v13, 50LL);
    v96 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150998);
    v110[13] = sub_1051B520(v96, v14, 50LL);
    v95 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CDC8);
    v110[14] = sub_1051B520(v95, v15, 50LL);
    v94 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150C38);
    v110[15] = sub_1051B520(v94, v16, 50LL);
    v93 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150E18);
    v110[16] = sub_1051B520(v93, v17, 50LL);
    v92 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150B48);
    v110[17] = sub_1051B520(v92, v18, 50LL);
    v91 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614F048);
    v110[18] = sub_1051B710(v91, v19, 50LL);
    v90 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150908);
    v110[19] = sub_1051B710(v90, v20, 50LL);
    v89 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614F708);
    v110[20] = sub_1051B710(v89, v21, 50LL);
    v88 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150278);
    v110[21] = sub_1051B520(v88, v22, 65LL);
    v87 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150DE8);
    v110[22] = sub_1051B520(v87, v23, 65LL);
    v86 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614FD68);
    v110[23] = sub_1051B520(v86, v24, 65LL);
    v85 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CEE8);
    v110[24] = sub_1051B520(v85, v25, 65LL);
    v84 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614EFE8);
    v110[25] = sub_1051B520(v84, v26, 65LL);
    v83 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150038);
    v110[26] = sub_1051B520(v83, v27, 65LL);
    v82 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CD38);
    v110[27] = sub_1051B520(v82, v28, 65LL);
    v81 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614D638);
    v110[28] = sub_1051B520(v81, v29, 65LL);
    v80 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150CC8);
    v110[29] = sub_1051B520(v80, v30, 65LL);
    v79 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614F768);
    v110[30] = sub_1051B710(v79, v31, 65LL);
    v78 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614D248);
    v110[31] = sub_1051B710(v78, v32, 65LL);
    v77 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150008);
    v110[32] = sub_1051B520(v77, v33, 65LL);
    v76 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_161510E8);
    v110[33] = sub_1051B520(v76, v34, 65LL);
    v75 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614D668);
    v110[34] = sub_1051B520(v75, v35, 65LL);
    v74 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150D28);
    v110[35] = sub_1051B520(v74, v36, 65LL);
    v73 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614DA58);
    v110[36] = sub_1051B520(v73, v37, 65LL);
    v72 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CE88);
    v110[37] = sub_1051B710(v72, v38, 65LL);
    v71 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614FC18);
    v110[38] = sub_1051B710(v71, v39, 65LL);
    v70 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150E48);
    v110[39] = sub_1051B710(v70, v40, 65LL);
    v69 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614C8E8);
    v110[40] = sub_1051B710(v69, v41, 65LL);
    v68 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614C6D8);
    v110[41] = sub_1051B710(v68, v42, 65LL);
    v67 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150F08);
    v110[42] = sub_1051B520(v67, v43, 65LL);
    v66 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150338);
    v110[43] = sub_1051B520(v66, v44, 65LL);
    v65 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614E658);
    v110[44] = sub_1051B520(v65, v45, 85LL);
    v64 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CD68);
    v110[45] = sub_1051B520(v64, v46, 85LL);
    v63 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150068);
    v110[46] = sub_1051B520(v63, v47, 85LL);
    v62 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614F798);
    v110[47] = sub_1051B520(v62, v48, 85LL);
    v61 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_16150D88);
    v110[48] = sub_1051B520(v61, v49, 85LL);
    v60 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CC78);
    v110[49] = sub_1051B710(v60, v50, 85LL);
    v59 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614C768);
    v110[50] = sub_1051B710(v59, v51, 85LL);
    v58 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614D548);
    v110[51] = sub_1051B710(v58, v52, 85LL);
    v57 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CDF8);
    v110[52] = sub_1051B710(v57, v53, 100LL);
    v56 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614FD98);
    v110[53] = sub_1051B710(v56, v54, 100LL);
    std::vector<std::pair<int,signed char>,std::allocator<std::pair<int,signed char>>>::operator=(
      &unk_16151208,
      v110,
      54LL);
  }
  return &unk_16151208;
}
---

ComposterBlock *__fastcall ComposterBlock::extractItem(
        ComposterBlock *this,
        BlockSource *a2,
        const Block *a3,
        const BlockPos *a4)
{
  const BlockPos *v4; // rcx
  __int64 v5; // rdx
  int v7; // [rsp+4h] [rbp-3Ch]
  __int64 v8; // [rsp+18h] [rbp-28h]

  if ( (ComposterBlock::_verifyIsComposter(a3, a2) & 1) != 0
    && (v7 = Block::getState<int>(a3, &VanillaStates::ComposterFillLevel),
        v7 == (unsigned int)enum_cast<ComposterBlock::FillLevel>(8LL)) )
  {
    ComposterBlock::empty(a2, a3, a4, v4);
    v8 = HashedString::operator gsl::basic_string_span<char const,-1l>(&unk_1614CB58);
    ItemStack::ItemStack(this, v8, v5, 1LL, 0LL, 0LL);
  }
  else
  {
    ItemStack::ItemStack(this, (const ItemStack *)&ItemStack::EMPTY_ITEM);
  }
  return this;
}

__int64 __fastcall ComposterBlock::addItem(
        ComposterBlock *this,
        Container *a2,
        ItemStackBase *a3,
        ItemStack *a4,
        BlockSource *a5,
        const Block *a6,
        double a7,
        float a8)
{
  char v10; // [rsp+3Fh] [rbp-1h]

  if ( (ComposterBlock::addItem(a3, a4, a5, a6, a5, a7, a8) & 1) != 0 )
  {
    ItemStackBase::remove(a3, 1);
    (*(void (__fastcall **)(ComposterBlock *, _QWORD, ItemStackBase *))(*(_QWORD *)this + 80LL))(
      this,
      (unsigned int)a2,
      a3);
    (*(void (__fastcall **)(ComposterBlock *, _QWORD))(*(_QWORD *)this + 200LL))(this, (unsigned int)a2);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

__int64 __fastcall enum_cast<ComposterBlock::FillLevel>(unsigned int a1)
{
  return EnumCastHelper<ComposterBlock::FillLevel,(void *)0>(a1);
}

__int64 __fastcall ComposterBlock::canContainLiquid(ComposterBlock *this)
{
  return 1LL;
}



